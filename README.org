
* GCDObsidian
  + Embedded DSL for implementation of GPU Kernels
  + Generates CUDA/OpenCL kernels
  + Generates Sequential C code for testing purposes
    
* News in GCDObsidian 
  + Push Arrays: Explanation to come
       
* Latest changes/Changes in progress
  + Added the ability to pass scalar parameters to Kernels.  
  + Going to move away from Array/ArrayP and towards
    having the type (Array Pull) for Pull arrays and (Array Push) for Push arrays.  
  + Added GlobalArray 
    Experimenting with a new kind of Kernel. These kernels 
    have types like: GlobalArray Pull (Exp a) -> Kernel (GlobalArray Push (Exp a))
    This also lets the Obsidian programmer express some aspects of what we 
    usually refer to as Kernel coordination. 
    Two functions (block and unblock) chop global arrays up into small arrays suitable 
    for processing by what we have so far called a Kernel.
    There are some restrictions (maybe totally necessary): There is no way to, 
    within a kernel, go from (GlobalArray Push a) to (GlobalArray Pull a).  
       
  + Added Push arrays 

* Notes
  + (Solved, it works, see below)
    OpenCL: The kind of pointer arithmetic + casting, that has worked so well 
    in CUDA, seems to not work in OpenCL on the local memory. 
    Will need to scan the specification/documentation to find exactly what is 
    allowed and not on pointers to local memory in an OpenCL kernel. (Solved, see below)

  + The address space qualifiers are important! (__local int*)shared vs (int*)shared. 
    (int*)shared tried to cast local memory array called shared into a global array, so illegal!    

  + Obsidian Int are "64"bit on 64bit architectures. Is it also true that 
    a CUDA int is 64bit on 64bit architectures?

* TODO and to look into:
  + Improve upon the things in Sync.hs 
  + Fix SyncAnalysis
  + Perform CSE
  + Kernel Coordination layer
  + Generate the vSwap/iSwap kind of kernels. That is Kernels that operate 
       on an array based on its global tid instead of local tid.
  +  Generate Kernels that take scalar parameters
  + Syncing needs to be improved. (work on more kinds of arrays, needs type class magic)
  + Push arrays and parallelism 
  + Filters and unsafe operations that lead to nondeterminism
