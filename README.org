
* GCDObsidian
  + Embedded DSL for implementation of GPU Kernels
  + Generates CUDA/OpenCL kernels
  + Generates Sequential C code for testing purposes
    
* News in GCDObsidian 
  + Sync can be performed on groups of arrays. This leads 
    to that a number of threads equal to the GCD of the lengths of
    the arrays is used to compute and store them. 
  + The Sync concept will gradually be replaced by a group 
    of functions, "store" functions. 
  + Kernel Building blocks: 
    There are pure functions, (Array a -> Array a), that can be composed
    using Haskell functional composition. These are turned into "kernels" using the function pure.
    There are built in kernel building blocks, (things like, Array a -> Kernel (Array a)).
    These represents (hopefully) efficient ways to store intermediate values 
    in GPU shared memory. (store, storeIlv, storeIlvF, storeP - currently) 

    
* Work in progress
  + OpenCL generation is unfinished and untested
  + CUDA generation is untested
  + C generation is untested
  + More library functions needed
  


    
* Latest changes
  + Merged with Experimental!
  + What used to be (Array Int) is now (Array (Exp Int) or 
    (Array (Data Int)), whichever is preferable. 
    This means the Array datatype changed from 
    data Array a = Array (Exp Word32 -> Exp a) Word32 
    to 
    data Array a = Array (Exp Word32 -> a) Word32 
    
    LLarrays still have the (Exp Word32 -> Exp a) indexing function 
    so big parts of the code could be reused. 


